/**
 *	\file
 */


#pragma once


namespace seng499 {
	
	
	/**
	 *	Represents a value generated in the process
	 *	of evaluating a pipeline block.
	 *
	 *	This is provided via an abstract base class
	 *	rather than directly returning the represented
	 *	value due to the fact the value may be stored
	 *	somewhere other than the CPU (such as on a GPU)
	 *	and it may not be necessary to download it
	 *	into main memory after each pipeline block
	 *	executes.
	 *
	 *	\tparam T
	 *		The type of value represented.
	 */
	template <typename T>
	class pipeline_value {
		
		
		public:
		
		
			pipeline_value () = default;
			pipeline_value (const pipeline_value &) = delete;
			pipeline_value (pipeline_value &&) = delete;
			pipeline_value & operator = (const pipeline_value &) = delete;
			pipeline_value & operator = (pipeline_value &&) = delete;
			
			
			/**
			 *	Allows derived classes to be cleaned up
			 *	through pointer or reference to base.
			 */
			virtual ~pipeline_value () noexcept {	}
			
			
			/**
			 *	Retrieves the represented value.
			 *
			 *	Invoking this method before the value has been
			 *	generated by the corresponding pipeline block
			 *	results in undefined behaviour.
			 *
			 *	\return
			 *		A reference to the represented value.
			 */
			virtual const T & get () = 0;
		
		
	};
	
	
}
